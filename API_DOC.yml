openapi: 3.0.2
info:
  title: Diabetless API
  version: 1.0.0
servers:
  - url: https://backend-sggimrersq-et.a.run.app
    description: Development server
paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: The full name of the user.
                email:
                  type: string
                  format: email
                  description: The email of the user.
                username:
                  type: string
                  description: The username of the user.
                password:
                  type: string
                  format: password
                  description: The password for the user account.
              required:
                - fullName
                - email
                - username
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating successful registration.
                  token:
                    type: string
                    description: JWT token for the user session.
        '400':
          description: Bad request, email has been registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the email has already been registered.

  /users/login:
    post:
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email of the user.
                password:
                  type: string
                  format: password
                  description: The password for the user account.
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating successful login.
                  token:
                    type: string
                    description: JWT token for the user session.
        '400':
          description: Wrong email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating invalid email or password.
  /users:
    get:
      summary: User Account Data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully Get User Account Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch user data
                  user:
                    type: object
                    properties:
                      fullName:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      username:
                        type: string
                        example: johndoe
                      profilePicture:
                        type: string
                        example: http://example.com/profile.jpg
                      birthday:
                        type: string
                        example: 07/11/2000
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        '400':
          description: "User doesn't exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user doesn't exist". 
  /users/edit-profile:
    post:
      summary: User Account Data
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: User's fullName.
                username:
                  type: string
                  description: User's username
                image:
                  type: string
                  format: binary
                  description: User's profile picture.
                email:
                  type: string
                  description: User's email which has not been registered
      responses:
        '200':
          description: Successfully Updated User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully created.
        '400':
          description: Bad request, email has been registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the email has already been registered.
  /articles:
    get:
      summary: All Articles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully Get All Title and Post Date Articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch all article
                  article:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: fc11b200-4e9d-4150-b450-ac784533f2b7
                        postDate:
                          type: string
                          example: Thu Nov 09 2023
                        imageUrl:
                          type: string
                          example: https://storage.googleapis.com/example-project/example.png
                        title:
                          type: string
                          example: TITLE
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
    post:
      summary: Create a New Article
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of article.
                content:
                  type: string
                  description: The content of article.
                image:
                  type: string
                  format: binary
                  description: The image of article.
              required:
                - title
                - content
                - image
      responses:
        '201':
          description: Article successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully created.
        '400':
          description: The field required empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Field required empty.
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
  
  /articles/{id}:
    get:
      summary: Get spesific article
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully get the article
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch article
                  article:
                    type: object
                    properties:
                      imageUrl:
                        type: string
                        example: https://storage.googleapis.com/example-project/example.png
                      postDate:
                        type: string
                        example: Thu Nov 09 2023
                      _id:
                        type: string
                        example: fc11b200-4e9d-4150-b450-ac784533f2b7
                      title:
                        type: string
                        example: TITLE
                      content:
                        type: string
                        example: Content
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        '404':
          description: Article not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the article not found.
    put:
      summary: Update the exsiting article.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of article.
                content:
                  type: string
                  description: The content of article.
                image:
                  type: string
                  format: binary
                  description: The image of article.
      responses:
        '200':
          description: Article successfully Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully Updated.
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        '404':
          description: Article not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the article not found.

  /meals:
    get:
      summary: All Meals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully Get All Title,Post Date, Image, Glycemic Index, Glycemic Load, and Calorie Meals
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch all Meals
                  meal:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: fc11b200-4e9d-4150-b450-ac784533f2b7
                        postDate:
                          type: string
                          example: Thu Nov 09 2023
                        title:
                          type: string
                          example: Title
                        glycemicIndex:
                          type: number
                          example: 11
                        glycemicLoad:
                          type: number
                          example: 11
                        calorie:
                          type: number
                          example: 11
                        protein:
                          type: number
                          example: 11
                        carbs:
                          type: number
                          example: 11
                        fats:
                          type: number
                          example: 11
                        imageUrl:
                          type: string
                          example: https://storage.googleapis.com/example-project/example.png
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
    post:
      summary: Create a New Meal
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of meal.
                content:
                  type: string
                  description: The content of meal.
                image:
                  type: string
                  format: binary
                  description: The image of meal.
                glycemicIndex:
                  type: string
                  description: The Glycemic Index of meal.
                glycemicLoad:
                  type: string
                  description: The Glycemic Load of meal.
                calorie:
                  type: string
                  description: The Calorie of meal.
                protein:
                  type: string
                  description: The Protein of meal.
                carbs:
                  type: string
                  description: The Carbo of meal.
                fats:
                  type: string
                  description: The Fats of meal.
              required:
                - title
                - content
                - image
                - glycemicIndex
                - glycemicLoad
                - calorie
                - protein
                - carbs
                - fats
      responses:
        '201':
          description: Meals successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the meal successfully created.
        '400':
          description: The field required empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Field required empty.
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
  
  /meals/{id}:
    get:
      summary: Get spesific meal
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully get the meal
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch meal
                  meal:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: fc11b200-4e9d-4150-b450-ac784533f2b7
                      postDate:
                        type: string
                        example: Thu Nov 09 2023
                      title:
                        type: string
                        example: Title
                      glycemicIndex:
                        type: number
                        example: 11
                      glycemicLoad:
                        type: number
                        example: 11
                      calorie:
                        type: number
                        example: 11
                      protein:
                          type: number
                          example: 11
                      carbs:
                        type: number
                        example: 11
                      fats:
                        type: number
                        example: 11
                      imageUrl:
                        type: string
                        example: https://storage.googleapis.com/example-project/example.png
                      content:
                        type: string
                        example: Content
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        '404':
          description: Meal not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the meal not found.
    put:
      summary: Update the exsiting meal.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of meal.
                content:
                  type: string
                  description: The content of meal.
                image:
                  type: string
                  format: binary
                  description: The image of meal.
                glycemicIndex:
                  type: string
                  description: The Glycemic Index of meal.
                glycemicLoad:
                  type: string
                  description: The Glycemic Load of meal.
                calorie:
                  type: string
                  description: The Calorie of meal.
                protein:
                  type: string
                  description: The Protein of meal.
                carbs:
                  type: string
                  description: The Carbo of meal.
                fats:
                  type: string
                  description: The Fats of meal.
      responses:
        '200':
          description: Meal successfully Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the meal successfully Updated.
        '403':
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        '404':
          description: Meal not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the meal not found.


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
                        
          

