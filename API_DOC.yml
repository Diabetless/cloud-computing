openapi: 3.0.2
info:
  title: Diabetless API
  version: 1.0.0
servers:
  - url: https://backend-sggimrersq-et.a.run.app
    description: Development server
  - url: http://localhost:5000
    description: Local Development server
tags:
  - name: User_Account
    description: All about user account
  - name: Articles
    description: All about healthy lifestyle article
  - name: Meals
    description: Meal plan & nutrition fact
  - name: Personal_Health
    description: Track BMI & blood sugar level
paths:
  /users/register:
    post:
      tags: 
        - User_Account
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: The full name of the user.
                email:
                  type: string
                  format: email
                  description: The email of the user.
                username:
                  type: string
                  description: The username of the user.
                password:
                  type: string
                  format: password
                  description: The password for the user account.
              required:
                - fullName
                - email
                - username
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating successful registration.
        "400":
          description: Bad request, email has been registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the email has already been registered.
  /users/login:
    post:
      tags: 
        - User_Account
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email of the user.
                password:
                  type: string
                  format: password
                  description: The password for the user account.
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating successful login.
                  token:
                    type: string
                    description: JWT token for the user session.
        "400":
          description: Wrong email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating invalid email or password.
  /users:
    get:
      tags: 
        - User_Account
      summary: User Account Data
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Get User Account Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch user data
                  user:
                    type: object
                    properties:
                      fullName:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      username:
                        type: string
                        example: johndoe
                      profilePicture:
                        type: string
                        example: http://example.com/profile.jpg
                      birthday:
                        type: string
                        example: 07/11/2000
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        "400":
          description: "User doesn't exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user doesn't exist".
  /users/edit-profile:
    put:
      tags: 
        - User_Account
      summary: Edit User's Profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: User's fullName.
                username:
                  type: string
                  description: User's username
                email:
                  type: string
                  description: User's email which has not been registered
                birthday:
                  type: string
                  description: date month year
      responses:
        "200":
          description: Successfully Updated User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully created.
        "400":
          description: Bad request, email has been registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the email has already been registered.
  /users/edit-password:
    put:
      tags: 
        - User_Account
      summary: Edit User's Password
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: user password
      responses:
        "200":
          description: Successfully Updated User Password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully created.
        "400":
          description: Bad request, password can't be empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the password is empty.
  /users/profile-picture:
    put:
      tags: 
        - User_Account
      summary: User Account Data
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: User's profile picture.
      responses:
        '200':
          description: Successfully Updated User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully created.
        '400':
          description: Bad request, picture is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the picture is empty
  /users/health:
    get:
      tags:
        - Personal_Health
      summary: get user bmi & blood sugar data
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Updated User BMI
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating successfully fetch user health data.
                  BMIData:
                    type: array
                    description: Array of user BMI data.
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: id record
                        date:
                          type: string
                          description: Date of the health data (e.g., "November 21, 2023 at 7:05:53 PM UTC+7").
                        height:
                          type: number
                          description: Height in units (e.g., centimeters).
                        weight:
                          type: number
                          description: Weight in units (e.g., kilograms).
                  bloodSugarData:
                    type: array
                    description: Array of user BMI data.
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: id record
                        date:
                          type: string
                          description: Date of the health data (e.g., "November 21, 2023 at 7:05:53 PM UTC+7").
                        level:
                          type: number
                          description: Sugar level in units (mg/dL).
  /users/bmi:
    post:
      tags:
        - Personal_Health
      summary: post current bmi user's data
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                height:
                  type: number
                  description: user's height in centimeter
                weight:
                  type: number
                  description: user's weight in kilogram
      responses:
        "201":
          description: Successfully Updated User BMI
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating successfully added user BMI data.
        "401":
          description: Bad request, token is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the user need to login.
  /users/bmi/{id}:
    delete:
      tags:
        - Personal_Health
      summary: Delete the BMI data users by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: BMI Data successfully Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the BMI successfully delete.
        "404":
          description: BMI Data not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the article not found.
  /users/blood-sugar:
    post:
      tags:
        - Personal_Health
      summary: post current blood sugar user's data
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bloodSugarLevel:
                  type: number
                  description: blood sugar level in mg/dl
      responses:
        "201":
          description: Successfully Updated User Blood Sugar Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                  message:
                    type: string
                    description: Message indicating successfully added user Blood sugar data.
        "401":
          description: Bad request, token is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating the user need to login.
  
  /users/blood-sugar/{id}:
    delete:
      tags:
        - Personal_Health
      summary: Delete the Blood Sugar data users by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blood Sugar Data successfully Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the Blood Sugar successfully Updated.
        "404":
          description: Blood Sugar Data not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the article not found.

  /articles:
    get:
      tags:
        - Articles
      summary: All Articles
      responses:
        "200":
          description: Successfully Get All Title and Post Date Articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch all article
                  article:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: fc11b200-4e9d-4150-b450-ac784533f2b7
                        postDate:
                          type: string
                          example: Thu Nov 09 2023
                        imageUrl:
                          type: string
                          example: https://storage.googleapis.com/example-project/example.png
                        title:
                          type: string
                          example: TITLE
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
    post:
      tags:
        - Articles
      summary: Create a New Article
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of article.
                content:
                  type: string
                  description: The content of article.
                image:
                  type: string
                  format: binary
                  description: The image of article.
              required:
                - title
                - content
                - image
      responses:
        "201":
          description: Article successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully created.
        "400":
          description: The field required empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Field required empty.
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.

  /articles/{id}:
    get:
      tags:
        - Articles
      summary: Get spesific article
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully get the article
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch article
                  article:
                    type: object
                    properties:
                      imageUrl:
                        type: string
                        example: https://storage.googleapis.com/example-project/example.png
                      postDate:
                        type: string
                        example: Thu Nov 09 2023
                      _id:
                        type: string
                        example: fc11b200-4e9d-4150-b450-ac784533f2b7
                      title:
                        type: string
                        example: TITLE
                      content:
                        type: string
                        example: Content
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the article not found.
    put:
      tags:
        - Articles
      summary: Update the exsiting article.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of article.
                content:
                  type: string
                  description: The content of article.
                image:
                  type: string
                  format: binary
                  description: The image of article.
      responses:
        "200":
          description: Article successfully Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the article successfully Updated.
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        "404":
          description: Article not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the article not found.
  /meals:
    get:
      tags:
        - Meals
      summary: All Meals
      responses:
        "200":
          description: Successfully Get All Title,Post Date, Image, Glycemic Index, Glycemic Load, and Calorie Meals
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch all Meals
                  meal:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: fc11b200-4e9d-4150-b450-ac784533f2b7
                        postDate:
                          type: string
                          example: Thu Nov 09 2023
                        title:
                          type: string
                          example: Title
                        glycemicIndex:
                          type: number
                          example: 11
                        glycemicLoad:
                          type: number
                          example: 11
                        calorie:
                          type: number
                          example: 11
                        protein:
                          type: number
                          example: 11
                        carbs:
                          type: number
                          example: 11
                        fats:
                          type: number
                          example: 11
                        imageUrl:
                          type: string
                          example: https://storage.googleapis.com/example-project/example.png
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
    post:
      tags:
        - Meals
      summary: Create a New Meal
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of meal.
                content:
                  type: string
                  description: The content of meal.
                image:
                  type: string
                  format: binary
                  description: The image of meal.
                glycemicIndex:
                  type: string
                  description: The Glycemic Index of meal.
                glycemicLoad:
                  type: string
                  description: The Glycemic Load of meal.
                calorie:
                  type: string
                  description: The Calorie of meal.
                protein:
                  type: string
                  description: The Protein of meal.
                carbs:
                  type: string
                  description: The Carbo of meal.
                fats:
                  type: string
                  description: The Fats of meal.
              required:
                - title
                - content
                - image
                - glycemicIndex
                - glycemicLoad
                - calorie
                - protein
                - carbs
                - fats
      responses:
        "201":
          description: Meals successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the meal successfully created.
        "400":
          description: The field required empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Field required empty.
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
  /meals/{id}:
    get:
      tags:
        - Meals
      summary: Get spesific meal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully get the meal
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully fetch meal
                  meal:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: fc11b200-4e9d-4150-b450-ac784533f2b7
                      postDate:
                        type: string
                        example: Thu Nov 09 2023
                      title:
                        type: string
                        example: Title
                      glycemicIndex:
                        type: number
                        example: 11
                      glycemicLoad:
                        type: number
                        example: 11
                      calorie:
                        type: number
                        example: 11
                      protein:
                        type: number
                        example: 11
                      carbs:
                        type: number
                        example: 11
                      fats:
                        type: number
                        example: 11
                      imageUrl:
                        type: string
                        example: https://storage.googleapis.com/example-project/example.png
                      content:
                        type: string
                        example: Content
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        "404":
          description: Meal not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the meal not found.
    put:
      tags:
        - Meals
      summary: Update the exsiting meal.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of meal.
                content:
                  type: string
                  description: The content of meal.
                image:
                  type: string
                  format: binary
                  description: The image of meal.
                glycemicIndex:
                  type: string
                  description: The Glycemic Index of meal.
                glycemicLoad:
                  type: string
                  description: The Glycemic Load of meal.
                calorie:
                  type: string
                  description: The Calorie of meal.
                protein:
                  type: string
                  description: The Protein of meal.
                carbs:
                  type: string
                  description: The Carbo of meal.
                fats:
                  type: string
                  description: The Fats of meal.
      responses:
        "200":
          description: Meal successfully Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating the meal successfully Updated.
        "403":
          description: "Token must be included in bearer at req.headers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating user must login first.
        "404":
          description: Meal not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Indication the meal not found.
  /meals/detect-food:
    post:
      tags: 
        - Meals
      summary: Detect Foods with ML Models.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Foods image that wants to detect.
              required:
                - image
      responses:
        "200":
          description: Nutrition Fatcs and Recommendation
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                  result:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        name:
                          type: "string"
                        type: 
                          type: "string"
                        nutrition_fact:
                          type: "object"
                          properties:
                            GL: 
                              type: "number"
                            GL_Level:
                              type: "string"  
                            GI:
                              type: "number"
                            GI_Level: 
                              type: "string"
                            Proteins:
                              type: "number"
                            Carbohydrates:
                              type: "number"
                            Fats:
                              type: "number"  
                            Calories:
                              type: "number"
                        tags:
                          type: "array"
                          items:
                            type: "string"
                        serving:
                          type: "string"
                        recommendation:
                          type: "array"
                          items:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                              type:
                                type: "string"
                              nutrition_fact:
                                type: "object"
                                properties:
                                  GL: 
                                    type: "number"
                                  GL_Level:
                                    type: "string"  
                                  GI:
                                    type: "number"
                                  GI_Level: 
                                    type: "string"
                                  Proteins:
                                    type: "number"
                                  Carbohydrates:
                                    type: "number"
                                  Fats:
                                    type: "number"  
                                  Calories:
                                    type: "number"
                              tags:
                                type: "array"
                                items:
                                  type: "string"
                              serving:
                                type: "string"
                              imageUrl:
                                type: "string"
        "404":
          description: Bad request, detected foods not found in db.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message.
  

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
